/**
 * LIMPEZA URGENTE - LIBERAR ESPA√áO SQL
 * Script direto para limpar fileData sem consultas pesadas
 */

import { getConnection } from '../backend/config/database.js';

async function limpezaUrgente() {
  console.log('üö® LIMPEZA URGENTE - LIBERANDO ESPA√áO SQL...');
  
  try {
    const pool = await getConnection();
    const request = pool.request();
    
    console.log('‚úÖ Conectado ao SQL Server');
    console.log('üóëÔ∏è Executando limpeza direta do campo fileData...');
    
    // UPDATE direto sem SELECT primeiro
    const updateQuery = `
      UPDATE marh_documents 
      SET fileData = NULL 
      WHERE fileData IS NOT NULL
    `;
    
    console.log('‚è≥ Executando UPDATE (pode demorar alguns minutos)...');
    const startTime = Date.now();
    
    const result = await request.query(updateQuery);
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log(`‚úÖ UPDATE conclu√≠do em ${duration} segundos`);
    console.log(`üìä Registros afetados: ${result.rowsAffected[0] || 'N/A'}`);
    
    console.log('\nüéâ ESPA√áO LIBERADO COM SUCESSO!');
    console.log('‚úÖ Campo fileData limpo');
    console.log('‚úÖ Registros de documentos mantidos');
    console.log('‚úÖ Banco agora tem espa√ßo livre');
    console.log('üöÄ Pode rodar o rob√¥ FTP normalmente!');
    
  } catch (error) {
    console.error('‚ùå Erro na limpeza:', error.message);
    
    if (error.message.includes('Connection lost')) {
      console.log('\nüí° DICA: Banco muito sobrecarregado.');
      console.log('Tente novamente em alguns minutos ou:');
      console.log('1. Execute via SQL Server Management Studio');
      console.log('2. Execute: UPDATE marh_documents SET fileData = NULL WHERE fileData IS NOT NULL');
    }
    
    throw error;
  }
}

limpezaUrgente();
