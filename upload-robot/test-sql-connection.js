/**
 * Teste simples para verificar se o rob√¥ consegue conectar no SQL Server
 * e carregar os funcion√°rios
 */

import { loadFromDB } from '../backend/utils/dbHelpers.js';

async function testSQLConnection() {
  console.log('üß™ TESTE DE CONEX√ÉO SQL SERVER');
  console.log('=' .repeat(50));
  
  try {
    console.log('üîå Conectando ao SQL Server...');
    
    // Testar carregamento de funcion√°rios
    console.log('üë• Carregando funcion√°rios...');
    const employees = await loadFromDB('employees');
    
    console.log(`‚úÖ SUCESSO! ${employees.length} funcion√°rios carregados`);
    
    if (employees.length > 0) {
      console.log('\nüìã Exemplo dos primeiros 3 funcion√°rios:');
      employees.slice(0, 3).forEach((emp, i) => {
        console.log(`${i+1}. ${emp.name} - CPF: ${emp.cpf} - Chapa: ${emp.chapa}`);
      });
    }
    
    if (employees.length >= 20000) {
      console.log('\nüéâ PERFEITO! Mais de 20k funcion√°rios encontrados!');
      console.log('‚úÖ O rob√¥ est√° conectado na base correta com todos os funcion√°rios!');
    } else if (employees.length > 1000) {
      console.log(`\nüìä ${employees.length} funcion√°rios encontrados - base parcial`);
    } else {
      console.log(`\n‚ö†Ô∏è Apenas ${employees.length} funcion√°rios - verifique a configura√ß√£o`);
    }
    
  } catch (error) {
    console.error('\n‚ùå ERRO na conex√£o:', error.message);
    console.error('Detalhes:', error);
    
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:');
    console.log('1. Verificar credenciais no .env');
    console.log('2. Verificar se a tabela marh_employees existe');
    console.log('3. Verificar conectividade com o servidor SQL');
  }
}

testSQLConnection();
